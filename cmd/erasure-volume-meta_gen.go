package cmd

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Pool) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "n":
			z.Number, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Number")
				return
			}
		case "l":
			z.LocalHost, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "LocalHost")
				return
			}
		case "d":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "LocalDrives")
				return
			}
			if cap(z.LocalDrives) >= int(zb0002) {
				z.LocalDrives = (z.LocalDrives)[:zb0002]
			} else {
				z.LocalDrives = make([]string, zb0002)
			}
			for za0001 := range z.LocalDrives {
				z.LocalDrives[za0001], err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "LocalDrives", za0001)
					return
				}
			}
		case "r":
			var zb0003 uint32
			zb0003, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "RemoteHosts")
				return
			}
			if cap(z.RemoteHosts) >= int(zb0003) {
				z.RemoteHosts = (z.RemoteHosts)[:zb0003]
			} else {
				z.RemoteHosts = make([]string, zb0003)
			}
			for za0002 := range z.RemoteHosts {
				z.RemoteHosts[za0002], err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "RemoteHosts", za0002)
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Pool) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 4
	// write "n"
	err = en.Append(0x84, 0xa1, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Number)
	if err != nil {
		err = msgp.WrapError(err, "Number")
		return
	}
	// write "l"
	err = en.Append(0xa1, 0x6c)
	if err != nil {
		return
	}
	err = en.WriteString(z.LocalHost)
	if err != nil {
		err = msgp.WrapError(err, "LocalHost")
		return
	}
	// write "d"
	err = en.Append(0xa1, 0x64)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.LocalDrives)))
	if err != nil {
		err = msgp.WrapError(err, "LocalDrives")
		return
	}
	for za0001 := range z.LocalDrives {
		err = en.WriteString(z.LocalDrives[za0001])
		if err != nil {
			err = msgp.WrapError(err, "LocalDrives", za0001)
			return
		}
	}
	// write "r"
	err = en.Append(0xa1, 0x72)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.RemoteHosts)))
	if err != nil {
		err = msgp.WrapError(err, "RemoteHosts")
		return
	}
	for za0002 := range z.RemoteHosts {
		err = en.WriteString(z.RemoteHosts[za0002])
		if err != nil {
			err = msgp.WrapError(err, "RemoteHosts", za0002)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Pool) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "n"
	o = append(o, 0x84, 0xa1, 0x6e)
	o = msgp.AppendInt(o, z.Number)
	// string "l"
	o = append(o, 0xa1, 0x6c)
	o = msgp.AppendString(o, z.LocalHost)
	// string "d"
	o = append(o, 0xa1, 0x64)
	o = msgp.AppendArrayHeader(o, uint32(len(z.LocalDrives)))
	for za0001 := range z.LocalDrives {
		o = msgp.AppendString(o, z.LocalDrives[za0001])
	}
	// string "r"
	o = append(o, 0xa1, 0x72)
	o = msgp.AppendArrayHeader(o, uint32(len(z.RemoteHosts)))
	for za0002 := range z.RemoteHosts {
		o = msgp.AppendString(o, z.RemoteHosts[za0002])
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Pool) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "n":
			z.Number, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Number")
				return
			}
		case "l":
			z.LocalHost, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "LocalHost")
				return
			}
		case "d":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "LocalDrives")
				return
			}
			if cap(z.LocalDrives) >= int(zb0002) {
				z.LocalDrives = (z.LocalDrives)[:zb0002]
			} else {
				z.LocalDrives = make([]string, zb0002)
			}
			for za0001 := range z.LocalDrives {
				z.LocalDrives[za0001], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "LocalDrives", za0001)
					return
				}
			}
		case "r":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "RemoteHosts")
				return
			}
			if cap(z.RemoteHosts) >= int(zb0003) {
				z.RemoteHosts = (z.RemoteHosts)[:zb0003]
			} else {
				z.RemoteHosts = make([]string, zb0003)
			}
			for za0002 := range z.RemoteHosts {
				z.RemoteHosts[za0002], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "RemoteHosts", za0002)
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Pool) Msgsize() (s int) {
	s = 1 + 2 + msgp.IntSize + 2 + msgp.StringPrefixSize + len(z.LocalHost) + 2 + msgp.ArrayHeaderSize
	for za0001 := range z.LocalDrives {
		s += msgp.StringPrefixSize + len(z.LocalDrives[za0001])
	}
	s += 2 + msgp.ArrayHeaderSize
	for za0002 := range z.RemoteHosts {
		s += msgp.StringPrefixSize + len(z.RemoteHosts[za0002])
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *volumeMeta) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "v":
			z.Version, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Version")
				return
			}
		case "t":
			z.Token, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Token")
				return
			}
		case "ps":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Pools")
				return
			}
			if z.Pools == nil {
				z.Pools = make(map[string]Pool, zb0002)
			} else if len(z.Pools) > 0 {
				for key := range z.Pools {
					delete(z.Pools, key)
				}
			}
			for zb0002 > 0 {
				zb0002--
				var za0001 string
				var za0002 Pool
				za0001, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Pools")
					return
				}
				err = za0002.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Pools", za0001)
					return
				}
				z.Pools[za0001] = za0002
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *volumeMeta) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "v"
	err = en.Append(0x83, 0xa1, 0x76)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Version)
	if err != nil {
		err = msgp.WrapError(err, "Version")
		return
	}
	// write "t"
	err = en.Append(0xa1, 0x74)
	if err != nil {
		return
	}
	err = en.WriteString(z.Token)
	if err != nil {
		err = msgp.WrapError(err, "Token")
		return
	}
	// write "ps"
	err = en.Append(0xa2, 0x70, 0x73)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.Pools)))
	if err != nil {
		err = msgp.WrapError(err, "Pools")
		return
	}
	for za0001, za0002 := range z.Pools {
		err = en.WriteString(za0001)
		if err != nil {
			err = msgp.WrapError(err, "Pools")
			return
		}
		err = za0002.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Pools", za0001)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *volumeMeta) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "v"
	o = append(o, 0x83, 0xa1, 0x76)
	o = msgp.AppendInt(o, z.Version)
	// string "t"
	o = append(o, 0xa1, 0x74)
	o = msgp.AppendString(o, z.Token)
	// string "ps"
	o = append(o, 0xa2, 0x70, 0x73)
	o = msgp.AppendMapHeader(o, uint32(len(z.Pools)))
	for za0001, za0002 := range z.Pools {
		o = msgp.AppendString(o, za0001)
		o, err = za0002.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Pools", za0001)
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *volumeMeta) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "v":
			z.Version, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Version")
				return
			}
		case "t":
			z.Token, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Token")
				return
			}
		case "ps":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Pools")
				return
			}
			if z.Pools == nil {
				z.Pools = make(map[string]Pool, zb0002)
			} else if len(z.Pools) > 0 {
				for key := range z.Pools {
					delete(z.Pools, key)
				}
			}
			for zb0002 > 0 {
				var za0001 string
				var za0002 Pool
				zb0002--
				za0001, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Pools")
					return
				}
				bts, err = za0002.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Pools", za0001)
					return
				}
				z.Pools[za0001] = za0002
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *volumeMeta) Msgsize() (s int) {
	s = 1 + 2 + msgp.IntSize + 2 + msgp.StringPrefixSize + len(z.Token) + 3 + msgp.MapHeaderSize
	if z.Pools != nil {
		for za0001, za0002 := range z.Pools {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001) + za0002.Msgsize()
		}
	}
	return
}
