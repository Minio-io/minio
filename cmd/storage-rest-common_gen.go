package cmd

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *nsScannerOptions) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "DiskID":
			z.DiskID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "DiskID")
				return
			}
		case "ScanMode":
			z.ScanMode, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "ScanMode")
				return
			}
		case "Cache":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "Cache")
					return
				}
				z.Cache = nil
			} else {
				if z.Cache == nil {
					z.Cache = new(dataUsageCache)
				}
				err = z.Cache.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Cache")
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *nsScannerOptions) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "DiskID"
	err = en.Append(0x83, 0xa6, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x44)
	if err != nil {
		return
	}
	err = en.WriteString(z.DiskID)
	if err != nil {
		err = msgp.WrapError(err, "DiskID")
		return
	}
	// write "ScanMode"
	err = en.Append(0xa8, 0x53, 0x63, 0x61, 0x6e, 0x4d, 0x6f, 0x64, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt(z.ScanMode)
	if err != nil {
		err = msgp.WrapError(err, "ScanMode")
		return
	}
	// write "Cache"
	err = en.Append(0xa5, 0x43, 0x61, 0x63, 0x68, 0x65)
	if err != nil {
		return
	}
	if z.Cache == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.Cache.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Cache")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *nsScannerOptions) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "DiskID"
	o = append(o, 0x83, 0xa6, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x44)
	o = msgp.AppendString(o, z.DiskID)
	// string "ScanMode"
	o = append(o, 0xa8, 0x53, 0x63, 0x61, 0x6e, 0x4d, 0x6f, 0x64, 0x65)
	o = msgp.AppendInt(o, z.ScanMode)
	// string "Cache"
	o = append(o, 0xa5, 0x43, 0x61, 0x63, 0x68, 0x65)
	if z.Cache == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.Cache.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Cache")
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *nsScannerOptions) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "DiskID":
			z.DiskID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "DiskID")
				return
			}
		case "ScanMode":
			z.ScanMode, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ScanMode")
				return
			}
		case "Cache":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Cache = nil
			} else {
				if z.Cache == nil {
					z.Cache = new(dataUsageCache)
				}
				bts, err = z.Cache.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Cache")
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *nsScannerOptions) Msgsize() (s int) {
	s = 1 + 7 + msgp.StringPrefixSize + len(z.DiskID) + 9 + msgp.IntSize + 6
	if z.Cache == nil {
		s += msgp.NilSize
	} else {
		s += z.Cache.Msgsize()
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *nsScannerResp) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Partial":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "Partial")
					return
				}
				z.Update = nil
			} else {
				if z.Update == nil {
					z.Update = new(dataUsageEntry)
				}
				err = z.Update.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Partial")
					return
				}
			}
		case "Cache":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "Cache")
					return
				}
				z.Final = nil
			} else {
				if z.Final == nil {
					z.Final = new(dataUsageCache)
				}
				err = z.Final.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Cache")
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *nsScannerResp) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "Partial"
	err = en.Append(0x82, 0xa7, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c)
	if err != nil {
		return
	}
	if z.Update == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.Update.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Partial")
			return
		}
	}
	// write "Cache"
	err = en.Append(0xa5, 0x43, 0x61, 0x63, 0x68, 0x65)
	if err != nil {
		return
	}
	if z.Final == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.Final.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Cache")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *nsScannerResp) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "Partial"
	o = append(o, 0x82, 0xa7, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c)
	if z.Update == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.Update.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Partial")
			return
		}
	}
	// string "Cache"
	o = append(o, 0xa5, 0x43, 0x61, 0x63, 0x68, 0x65)
	if z.Final == nil {
		o = msgp.AppendNil(o)
	} else {
		o, err = z.Final.MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Cache")
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *nsScannerResp) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "Partial":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Update = nil
			} else {
				if z.Update == nil {
					z.Update = new(dataUsageEntry)
				}
				bts, err = z.Update.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Partial")
					return
				}
			}
		case "Cache":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Final = nil
			} else {
				if z.Final == nil {
					z.Final = new(dataUsageCache)
				}
				bts, err = z.Final.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Cache")
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *nsScannerResp) Msgsize() (s int) {
	s = 1 + 8
	if z.Update == nil {
		s += msgp.NilSize
	} else {
		s += z.Update.Msgsize()
	}
	s += 6
	if z.Final == nil {
		s += msgp.NilSize
	} else {
		s += z.Final.Msgsize()
	}
	return
}
